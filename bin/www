#!/usr/bin/env node

/**
* Es el punto de entrada a la aplicaciÃ³n y aqui se construye y arranca el servidor http.
*
* @module www
* @since abril/2021
* @author responsivecodex@gmail.com
* @see module:app
* @see module:www
*/

const rcConfig = require("../rc-config.json");
//process.env.PORT = rcConfig.setup.port;
process.env.NODE_ENV = rcConfig.setup.environment;
process.env.maxAgeCookies = rcConfig.setup.maxAgeCookies;
const app = require("../app");
const debug = require("debug")("src:server");
const http = require("http");
const serverless = require('serverless-http');

/**
 * Get port from environment and store in Express.
 */

console.log("Module: www");

var server = null;
if (process.env.APP_ENVIRONMENT == "dev") {
  /**
  * Create HTTP server.
  */
  server = http.createServer(app);

} else {
  server = serverless(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);
app.listen(port, () => {
  console.log(`DOCUT app  is running on port ${ port }\n`);
});

if (process.env.APP_ENVIRONMENT == "dev") {
  server.on("error", onError);
  server.on("listening", onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

